name: build-docker-push
on: 
  #push:
  workflow_dispatch:
  workflow_call:
    # Map the workflow outputs to job outputs
    outputs:
      app_version:
        description: "The APP VERSION to be deployed"
        value: ${{ jobs.setup-build-publish-deploy.outputs.app_version }}
      matrix:
        description: "App_NAME"
        value: ${{ jobs.generateInputPaths.outputs.matrix }}
#on:
#  push:

env:
  DOCKER_REGISTRY: gcr.io/${{ secrets.GCP_PROJECT }}
  DOCKER_UN: ${{ secrets.DOCKER_UN }}
  DOCKER_PW: ${{ secrets.DOCKER_PWD }}
  
jobs:
  generateInputPaths:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - uses: actions/checkout@v2
    - name: Generate matrix with all modules of WhatTheHack repository
      id: set-matrix
      run: |
        #echo '::set-output name=matrix::["spring"]'
        echo '::set-output name=matrix::["spring", "grafana"]'

      
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    needs: generateInputPaths
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.build.outputs.app_version }}
    strategy:
      #fail-fast: false
      matrix:
        path: ${{fromJson(needs.generateInputPaths.outputs.matrix)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Tags
        shell: bash
        run: |
          version_file="deployment_version.yaml"
          echo "${{ matrix.path }}_version=$(yq -r .${{ matrix.path }}.version ${version_file})" >> $GITHUB_ENV
          #echo "SPRING_APP_VERSION=$(yq -r .spingjar.version ${version_file})" >> $GITHUB_ENV
      # Login to GCR
      - name: Login to GCR
        run: |-
          docker login $DOCKER_REGISTRY --username $DOCKER_UN --password $DOCKER_PW
      # Replace value in Dockerfile
      - name: Replace Values
        working-directory: ./Dockerfiles/spring
        run: |
          sed -i -e "s|DOCKER_REGISTRY|$DOCKER_REGISTRY|g" Dockerfile
      # Build Docker Image
      - name: Build
        id: build
        working-directory: ./Dockerfiles
        run: |-
          IMAGE_VERSION=${${{ matrix.path }}_version}
          echo $IMAGE_VERSION
          echo "app_version=$IMAGE_VERSION" >> $GITHUB_OUTPUT
          docker build -t $DOCKER_REGISTRY/${{ matrix.path }}:$IMAGE_VERSION --file ./${{ matrix.path }}/Dockerfile .
      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          IMAGE_VERSION=${${{ matrix.path }}_version}
          docker push $DOCKER_REGISTRY/${{ matrix.path }}:$IMAGE_VERSION


  deploy-app-on-GKE-DEV:
    name: Deploy on Dev
    needs: ['generateInputPaths', 'setup-build-publish-deploy']
    environment: dev
    runs-on: ubuntu-latest
    strategy:
      #fail-fast: false
      matrix:
        path: ${{fromJson(needs.generateInputPaths.outputs.matrix)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      # Install GCP Dependencies
      - name: cloud-sdk-setup
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          service_account_key: ${{ secrets.GOOGLE_CRED }}
          export_default_credentials: true
      - id: 'get-credentials'
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: 'test'
          location: 'us-central1-c'
      # Configure runner with GKE
      # Install chart in DEV Env
      - name: upgrade chart
        id: chart-dev
        working-directory: ./charts/spring
        run: |
          echo ${{ needs.setup-build-publish-deploy.outputs.app_version }}
          APP_VERSION=${{ needs.setup-build-publish-deploy.outputs.app_version }}
          sed -i -e "s|tag: VERSION|tag: $APP_VERSION|g" values-dev.yaml
          sed -i -e "s|APP_VERSION|$APP_VERSION|g" Chart.yaml
          sed -i -e "s|CHART_VERSION|$APP_VERSION|g" Chart.yaml
          sed -i -e "s|repository: IMAGE_NAME|repository: $DOCKER_REGISTRY/spring|g" values-dev.yaml
          helm upgrade -i spring -f ./values-dev.yaml . --namespace dev
