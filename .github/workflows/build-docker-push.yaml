name: build-docker-push
on: 
  #push:
  workflow_dispatch:
    inputs:
      release_type:
        type: choice
        description: Select major,minor or patch
        options:
        - major
        - minor
        - patch
      name:
        type: multi-choice
        description: Select service
        options: 
        - spring
        - springapp
        - app1
        - app2
        - app3
        - app4
        - app5
        - app6
        - app7
        - app8
        - app9
        - app10
        - app11
        - app12
        - app13
        - app14
        - app15
        - app16
  workflow_call:
    # Map the workflow outputs to job outputs
    outputs:
      spring_version:
        description: "The APP VERSION to be deployed"
        value: ${{ jobs.setup-build-publish-deploy.outputs.spring_version }}
      springapp_version:
        description: "The APP VERSION to be deployed"
        value: ${{ jobs.setup-build-publish-deploy.outputs.springapp_version }}
      matrix:
        description: "App_NAME"
        value: ${{ jobs.generateInputPaths.outputs.matrix }}
#on:
#  push:

env:
  DOCKER_REGISTRY: gcr.io/${{ secrets.GCP_PROJECT }}
  DOCKER_UN: ${{ secrets.DOCKER_UN }}
  DOCKER_PW: ${{ secrets.DOCKER_PWD }}
  
jobs:
  generateInputPaths:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - uses: actions/checkout@v2
    - name: Generate matrix with all modules of WhatTheHack repository
      id: set-matrix
      run: |
        #echo '::set-output name=matrix::["spring"]'
        echo '::set-output name=matrix::["spring", "springapp"]'

      
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    needs: generateInputPaths
    runs-on: ubuntu-latest
    
    strategy:
      #fail-fast: false
      matrix:
        path: ${{fromJson(needs.generateInputPaths.outputs.matrix)}}
    outputs:
      spring_version: ${{ steps.build.outputs.spring_version }}
      springapp_version: ${{ steps.build.outputs.springapp_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Tags
        shell: bash
        run: |
          version_file="deployment_version.yaml"
          echo "${{ matrix.path }}_version=$(yq -r .${{ matrix.path }}.version ${version_file})" >> $GITHUB_ENV
          #echo "SPRING_APP_VERSION=$(yq -r .spingjar.version ${version_file})" >> $GITHUB_ENV
      # Login to GCR
      - name: Login to GCR
        run: |-
          ##docker login $DOCKER_REGISTRY --username $DOCKER_UN --password $DOCKER_PW
      # Replace value in Dockerfile
      - name: Replace Values spring
        working-directory: ./Dockerfiles/spring
        run: |
          sed -i -e "s|DOCKER_REGISTRY|$DOCKER_REGISTRY|g" Dockerfile
      - name: Replace Values springapp
        working-directory: ./Dockerfiles/springapp
        run: |
          sed -i -e "s|DOCKER_REGISTRY|$DOCKER_REGISTRY|g" Dockerfile
      # Build Docker Image
      - name: Build
        id: build
        working-directory: ./Dockerfiles
        run: |-
          IMAGE_VERSION=${${{ matrix.path }}_version}
          echo $IMAGE_VERSION
          if [[ ${{ matrix.path }} == "spring" ]]
          then
            echo "spring_version=$IMAGE_VERSION" >> $GITHUB_OUTPUT
          fi
          if [[ ${{ matrix.path }} == "springapp" ]]
          then
            echo "springapp_version=$IMAGE_VERSION" >> $GITHUB_OUTPUT
          fi
          
          ##docker build -t $DOCKER_REGISTRY/${{ matrix.path }}:$IMAGE_VERSION --file ./${{ matrix.path }}/Dockerfile .
      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          IMAGE_VERSION=${${{ matrix.path }}_version}
          ##docker push $DOCKER_REGISTRY/${{ matrix.path }}:$IMAGE_VERSION
          

  deploy-app-on-GKE-DEV:
    name: Deploy on Dev
    needs: ['generateInputPaths', 'setup-build-publish-deploy']
    #environment: dev
    runs-on: ubuntu-latest
    strategy:
      #fail-fast: false
      matrix:
        path: ${{fromJson(needs.generateInputPaths.outputs.matrix)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      # Check deployed version
      - name: Current deployed version on DEV
        shell: bash
        run: |
          version_file=./.github/variables/myvars.env
          echo "PREV_CHART_VERSION=$(yq -r .${{ matrix.path }}_dev.version ${version_file})" >> $GITHUB_ENV
          echo "release=${{ github.event.inputs.release_type }}"
          if [[ $release == "major" ]]
          then
            $rel = 0
          fi
          if [[ $release == "minor" ]]
          then
            $rel = 1
          fi
          if [[ $release == "patch" ]]
          then
            $rel = 2
          fi
          local delimiter=.
          local array=($(echo "$PREV_CHART_VERSION" | tr $delimiter '\n'))
          array[$rel]=$((array[$rel]+1))
          if [ $rel -lt 2 ]; then array[2]=0; fi
          if [ $rel -lt 1 ]; then array[1]=0; fi
          echo $(local IFS=$delimiter ; echo "${array[*]}")
      # Install GCP Dependencies
      - name: cloud-sdk-setup
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          service_account_key: ${{ secrets.GOOGLE_CRED }}
          export_default_credentials: true
      - id: 'get-credentials'
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: 'test'
          location: 'us-central1-c'
      # Configure runner with GKE
      # Install chart in DEV Env
      - name: upgrade chart spring
        working-directory: ./charts
        run: |
          #echo ${{ needs.setup-build-publish-deploy.outputs.spring_version }}
          if [[ ${{ matrix.path }} == "spring" ]]
          then
            cd spring/
            echo ${{ needs.setup-build-publish-deploy.outputs.spring_version }}
            APP_VERSION=${{ needs.setup-build-publish-deploy.outputs.spring_version }}
            sed -i -e "s|tag: VERSION|tag: $APP_VERSION|g" values-dev.yaml
            sed -i -e "s|NAMES|spring|g" Chart.yaml
            sed -i -e "s|APP_VERSION|$APP_VERSION|g" Chart.yaml
            sed -i -e "s|CHART_VERSION|$CHART_VERSION|g" Chart.yaml
            sed -i -e "s|repository: IMAGE_NAME|repository: $DOCKER_REGISTRY/spring|g" values-dev.yaml
            helm upgrade -i spring -f ./values-dev.yaml . --namespace dev
          fi
          
          if [[ ${{ matrix.path }} == "springapp" ]]
          then
            cd springapp/
            echo ${{ needs.setup-build-publish-deploy.outputs.springapp_version }}
            APP_VERSION=${{ needs.setup-build-publish-deploy.outputs.springapp_version }}
            sed -i -e "s|tag: VERSION|tag: $APP_VERSION|g" values-dev.yaml
            sed -i -e "s|NAMES|springapp|g" Chart.yaml
            sed -i -e "s|APP_VERSION|$APP_VERSION|g" Chart.yaml
            sed -i -e "s|CHART_VERSION|$APP_VERSION|g" Chart.yaml
            sed -i -e "s|repository: IMAGE_NAME|repository: $DOCKER_REGISTRY/springapp|g" values-dev.yaml
            helm upgrade -i springapp -f ./values-dev.yaml . --namespace dev
          fi
          
  deploy-app-on-GKE-UAT:
    name: Deploy on UAT
    needs: ['generateInputPaths', 'setup-build-publish-deploy', 'deploy-app-on-GKE-DEV']
    environment: uat
    runs-on: ubuntu-latest
    strategy:
      #fail-fast: false
      matrix:
        path: ${{fromJson(needs.generateInputPaths.outputs.matrix)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      # Install GCP Dependencies
      - name: cloud-sdk-setup
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          service_account_key: ${{ secrets.GOOGLE_CRED }}
          export_default_credentials: true
      - id: 'get-credentials'
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: 'test-uat'
          location: 'us-central1-c'
      # Configure runner with GKE
      # Install chart in UAT Env
      - name: upgrade chart spring
        working-directory: ./charts
        run: |
          #echo ${{ needs.setup-build-publish-deploy.outputs.spring_version }}
          if [[ ${{ matrix.path }} == "spring" ]]
          then
            cd spring/
            echo ${{ needs.setup-build-publish-deploy.outputs.spring_version }}
            APP_VERSION=${{ needs.setup-build-publish-deploy.outputs.spring_version }}
            sed -i -e "s|tag: VERSION|tag: $APP_VERSION|g" values-uat.yaml
            sed -i -e "s|NAMES|spring|g" Chart.yaml
            sed -i -e "s|APP_VERSION|$APP_VERSION|g" Chart.yaml
            sed -i -e "s|CHART_VERSION|$APP_VERSION|g" Chart.yaml
            sed -i -e "s|repository: IMAGE_NAME|repository: $DOCKER_REGISTRY/spring|g" values-uat.yaml
            helm upgrade -i spring -f ./values-uat.yaml . --namespace uat
          fi
          
          if [[ ${{ matrix.path }} == "springapp" ]]
          then
            cd springapp/
            echo ${{ needs.setup-build-publish-deploy.outputs.springapp_version }}
            APP_VERSION=${{ needs.setup-build-publish-deploy.outputs.springapp_version }}
            sed -i -e "s|tag: VERSION|tag: $APP_VERSION|g" values-uat.yaml
            sed -i -e "s|NAMES|springapp|g" Chart.yaml
            sed -i -e "s|APP_VERSION|$APP_VERSION|g" Chart.yaml
            sed -i -e "s|CHART_VERSION|$APP_VERSION|g" Chart.yaml
            sed -i -e "s|repository: IMAGE_NAME|repository: $DOCKER_REGISTRY/springapp|g" values-uat.yaml
            helm upgrade -i springapp -f ./values-uat.yaml . --namespace uat
          fi
